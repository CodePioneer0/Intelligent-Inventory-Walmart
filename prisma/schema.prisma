generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stockMovements StockMovement[]
  
  @@map("users")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]
  
  @@map("categories")
}

model Supplier {
  id          String   @id @default(uuid())
  name        String
  contactEmail String?
  contactPhone String?
  address     String?
  rating      Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
  
  @@map("suppliers")
}

model Location {
  id        String   @id @default(uuid())
  name      String
  warehouse String
  zone      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  
  @@map("locations")
}

model Product {
  id            String     @id @default(uuid())
  name          String
  sku           String     @unique
  currentStock  Int        @default(0)
  reorderPoint  Int
  optimalStock  Int
  unitPrice     Decimal?
  velocity      Velocity
  riskLevel     RiskLevel
  categoryId    String
  supplierId    String
  locationId    String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  category       Category        @relation(fields: [categoryId], references: [id])
  supplier       Supplier        @relation(fields: [supplierId], references: [id])
  location       Location        @relation(fields: [locationId], references: [id])
  stockMovements StockMovement[]
  forecasts      Forecast[]
  alerts         Alert[]

  @@map("products")
}

model StockMovement {
  id              String      @id @default(uuid())
  productId       String
  movementType    MovementType
  quantity        Int
  referenceNumber String?
  notes           String?
  createdAt       DateTime    @default(now())
  createdBy       String?

  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [createdBy], references: [id])

  @@map("stock_movements")
}

model Forecast {
  id              String   @id @default(uuid())
  productId       String
  forecastDate    DateTime
  predictedDemand Int
  confidenceScore Float?
  modelVersion    String?
  createdAt       DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, forecastDate], name: "productId_forecastDate")
  @@map("forecasts")
}

model Alert {
  id          String    @id @default(uuid())
  productId   String?
  alertType   AlertType
  title       String
  description String
  isDismissed Boolean   @default(false)
  createdAt   DateTime  @default(now())

  product Product? @relation(fields: [productId], references: [id])

  @@map("alerts")
}

enum Role {
  USER
  ADMIN
  MANAGER
}

enum Velocity {
  HIGH
  MEDIUM
  LOW
}

enum RiskLevel {
  HIGH
  MEDIUM
  LOW
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
}

enum AlertType {
  CRITICAL
  WARNING
  INFO
}